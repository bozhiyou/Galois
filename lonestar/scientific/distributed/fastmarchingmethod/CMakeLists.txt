if(GALOIS_ENABLE_DIST)
  function(app_dist_exp name)
    set(options NO_GPU)
    set(one_value_args)
    set(multi_value_args)
    cmake_parse_arguments(X "${options}" "${one_value_args}" "${multi_value_args}" ${ARGN})

    FILE(GLOB CPPSOURCES ${name}*.cpp)
    add_executable(${name} ${CPPSOURCES} ${X_UNPARSED_ARGUMENTS}) # support customized soueces
    add_dependencies(apps ${name})
    target_link_libraries(${name} lonestar Galois::shmem LLVMSupport)
    install(TARGETS ${name} DESTINATION "${CMAKE_INSTALL_BINDIR}" COMPONENT apps EXCLUDE_FROM_ALL)

    target_link_libraries(${name} distbench)
    if(GALOIS_PER_ROUND_STATS)
      target_compile_definitions(${name} PRIVATE GALOIS_PER_ROUND_STATS=1)
    endif()
    if(GALOIS_COMM_STATS)
      target_compile_definitions(${name} PRIVATE GALOIS_COMM_STATS=1)
    endif()
    if(GALOIS_USE_BARE_MPI)
      target_compile_definitions(${name} PRIVATE GALOIS_USE_BARE_MPI=1)
    endif()

    if(GALOIS_ENABLE_GPU AND NOT ${X_NO_GPU})
      target_compile_definitions(${name} PRIVATE GALOIS_ENABLE_GPU=1)
      target_link_libraries(${name} ${name}_cuda)

      FILE(GLOB CUSOURCES ${name}*.cu)
      add_library(${name}_cuda ${CUSOURCES})
      target_link_libraries(${name}_cuda Galois::gpu)
      set_property(TARGET ${name}_cuda PROPERTY CUDA_STANDARD 14)
    endif()
  endfunction()
endif()

# if(("${CMAKE_VERSION}" VERSION_GREATER 3.8.0) OR ("${CMAKE_VERSION}" VERSION_EQUAL 3.8.0))
  if(GALOIS_ENABLE_DIST)
    include_directories("${PROJECT_SOURCE_DIR}/libgluon/include")

    add_subdirectory(util)

    app_dist_exp(fmm_dist_push fmm_dist_push.cpp speed_function.cpp boundary.cpp)
    set_property(TARGET fmm_dist_push PROPERTY CXX_STANDARD 17)
    set_property(TARGET fmm_dist_push APPEND PROPERTY COMPILE_FLAGS " -Werror=unused ")
    target_link_libraries(fmm_dist_push google-segystack numpy-cpp)

    app_dist_exp(fmm_dist_pull fmm_dist_pull.cpp speed_function.cpp boundary.cpp)
    set_property(TARGET fmm_dist_pull PROPERTY CXX_STANDARD 17)
    set_property(TARGET fmm_dist_pull APPEND PROPERTY COMPILE_FLAGS " -Werror=unused ")
    target_link_libraries(fmm_dist_pull google-segystack numpy-cpp)

    app_dist_exp(fmm_dist_wl fmm_dist_wl.cpp speed_function.cpp boundary.cpp)
    set_property(TARGET fmm_dist_wl PROPERTY CXX_STANDARD 17)
    set_property(TARGET fmm_dist_wl APPEND PROPERTY COMPILE_FLAGS " -Werror=unused ")
    target_link_libraries(fmm_dist_wl google-segystack numpy-cpp)
  endif()
# else()
#   message(WARNING "Cannot configure sweeps or other C++17 apps with a CMake version older than 3.8. Skipping.")
# endif()

